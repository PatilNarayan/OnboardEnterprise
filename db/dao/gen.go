// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	DataSource    *dataSource
	Document      *document
	FileToMigrate *fileToMigrate
	MigrateJobs   *migrateJobs
	Organization  *organization
	Team          *team
	TeamMember    *teamMember
	User          *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	DataSource = &Q.DataSource
	Document = &Q.Document
	FileToMigrate = &Q.FileToMigrate
	MigrateJobs = &Q.MigrateJobs
	Organization = &Q.Organization
	Team = &Q.Team
	TeamMember = &Q.TeamMember
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		DataSource:    newDataSource(db, opts...),
		Document:      newDocument(db, opts...),
		FileToMigrate: newFileToMigrate(db, opts...),
		MigrateJobs:   newMigrateJobs(db, opts...),
		Organization:  newOrganization(db, opts...),
		Team:          newTeam(db, opts...),
		TeamMember:    newTeamMember(db, opts...),
		User:          newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	DataSource    dataSource
	Document      document
	FileToMigrate fileToMigrate
	MigrateJobs   migrateJobs
	Organization  organization
	Team          team
	TeamMember    teamMember
	User          user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		DataSource:    q.DataSource.clone(db),
		Document:      q.Document.clone(db),
		FileToMigrate: q.FileToMigrate.clone(db),
		MigrateJobs:   q.MigrateJobs.clone(db),
		Organization:  q.Organization.clone(db),
		Team:          q.Team.clone(db),
		TeamMember:    q.TeamMember.clone(db),
		User:          q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		DataSource:    q.DataSource.replaceDB(db),
		Document:      q.Document.replaceDB(db),
		FileToMigrate: q.FileToMigrate.replaceDB(db),
		MigrateJobs:   q.MigrateJobs.replaceDB(db),
		Organization:  q.Organization.replaceDB(db),
		Team:          q.Team.replaceDB(db),
		TeamMember:    q.TeamMember.replaceDB(db),
		User:          q.User.replaceDB(db),
	}
}

type queryCtx struct {
	DataSource    IDataSourceDo
	Document      IDocumentDo
	FileToMigrate IFileToMigrateDo
	MigrateJobs   IMigrateJobsDo
	Organization  IOrganizationDo
	Team          ITeamDo
	TeamMember    ITeamMemberDo
	User          IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		DataSource:    q.DataSource.WithContext(ctx),
		Document:      q.Document.WithContext(ctx),
		FileToMigrate: q.FileToMigrate.WithContext(ctx),
		MigrateJobs:   q.MigrateJobs.WithContext(ctx),
		Organization:  q.Organization.WithContext(ctx),
		Team:          q.Team.WithContext(ctx),
		TeamMember:    q.TeamMember.WithContext(ctx),
		User:          q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
