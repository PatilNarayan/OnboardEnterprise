// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"core/models"
)

func newFileToMigrate(db *gorm.DB, opts ...gen.DOOption) fileToMigrate {
	_fileToMigrate := fileToMigrate{}

	_fileToMigrate.fileToMigrateDo.UseDB(db, opts...)
	_fileToMigrate.fileToMigrateDo.UseModel(&models.FileToMigrate{})

	tableName := _fileToMigrate.fileToMigrateDo.TableName()
	_fileToMigrate.ALL = field.NewAsterisk(tableName)
	_fileToMigrate.ID = field.NewField(tableName, "id")
	_fileToMigrate.OrgID = field.NewField(tableName, "org_id")
	_fileToMigrate.TeamID = field.NewField(tableName, "team_id")
	_fileToMigrate.DataSourceID = field.NewField(tableName, "data_source_id")
	_fileToMigrate.FileURL = field.NewString(tableName, "file_url")
	_fileToMigrate.FileName = field.NewString(tableName, "file_name")
	_fileToMigrate.Status = field.NewString(tableName, "status")
	_fileToMigrate.Visibility = field.NewString(tableName, "visibility")
	_fileToMigrate.CreatedBy = field.NewField(tableName, "created_by")
	_fileToMigrate.CreatedAt = field.NewTime(tableName, "created_at")
	_fileToMigrate.UpdatedAt = field.NewTime(tableName, "updated_at")

	_fileToMigrate.fillFieldMap()

	return _fileToMigrate
}

type fileToMigrate struct {
	fileToMigrateDo

	ALL          field.Asterisk
	ID           field.Field
	OrgID        field.Field
	TeamID       field.Field
	DataSourceID field.Field
	FileURL      field.String
	FileName     field.String
	Status       field.String
	Visibility   field.String
	CreatedBy    field.Field
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (f fileToMigrate) Table(newTableName string) *fileToMigrate {
	f.fileToMigrateDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileToMigrate) As(alias string) *fileToMigrate {
	f.fileToMigrateDo.DO = *(f.fileToMigrateDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileToMigrate) updateTableName(table string) *fileToMigrate {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewField(table, "id")
	f.OrgID = field.NewField(table, "org_id")
	f.TeamID = field.NewField(table, "team_id")
	f.DataSourceID = field.NewField(table, "data_source_id")
	f.FileURL = field.NewString(table, "file_url")
	f.FileName = field.NewString(table, "file_name")
	f.Status = field.NewString(table, "status")
	f.Visibility = field.NewString(table, "visibility")
	f.CreatedBy = field.NewField(table, "created_by")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fileToMigrate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileToMigrate) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["org_id"] = f.OrgID
	f.fieldMap["team_id"] = f.TeamID
	f.fieldMap["data_source_id"] = f.DataSourceID
	f.fieldMap["file_url"] = f.FileURL
	f.fieldMap["file_name"] = f.FileName
	f.fieldMap["status"] = f.Status
	f.fieldMap["visibility"] = f.Visibility
	f.fieldMap["created_by"] = f.CreatedBy
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fileToMigrate) clone(db *gorm.DB) fileToMigrate {
	f.fileToMigrateDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileToMigrate) replaceDB(db *gorm.DB) fileToMigrate {
	f.fileToMigrateDo.ReplaceDB(db)
	return f
}

type fileToMigrateDo struct{ gen.DO }

type IFileToMigrateDo interface {
	gen.SubQuery
	Debug() IFileToMigrateDo
	WithContext(ctx context.Context) IFileToMigrateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileToMigrateDo
	WriteDB() IFileToMigrateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileToMigrateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileToMigrateDo
	Not(conds ...gen.Condition) IFileToMigrateDo
	Or(conds ...gen.Condition) IFileToMigrateDo
	Select(conds ...field.Expr) IFileToMigrateDo
	Where(conds ...gen.Condition) IFileToMigrateDo
	Order(conds ...field.Expr) IFileToMigrateDo
	Distinct(cols ...field.Expr) IFileToMigrateDo
	Omit(cols ...field.Expr) IFileToMigrateDo
	Join(table schema.Tabler, on ...field.Expr) IFileToMigrateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileToMigrateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileToMigrateDo
	Group(cols ...field.Expr) IFileToMigrateDo
	Having(conds ...gen.Condition) IFileToMigrateDo
	Limit(limit int) IFileToMigrateDo
	Offset(offset int) IFileToMigrateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileToMigrateDo
	Unscoped() IFileToMigrateDo
	Create(values ...*models.FileToMigrate) error
	CreateInBatches(values []*models.FileToMigrate, batchSize int) error
	Save(values ...*models.FileToMigrate) error
	First() (*models.FileToMigrate, error)
	Take() (*models.FileToMigrate, error)
	Last() (*models.FileToMigrate, error)
	Find() ([]*models.FileToMigrate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FileToMigrate, err error)
	FindInBatches(result *[]*models.FileToMigrate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.FileToMigrate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileToMigrateDo
	Assign(attrs ...field.AssignExpr) IFileToMigrateDo
	Joins(fields ...field.RelationField) IFileToMigrateDo
	Preload(fields ...field.RelationField) IFileToMigrateDo
	FirstOrInit() (*models.FileToMigrate, error)
	FirstOrCreate() (*models.FileToMigrate, error)
	FindByPage(offset int, limit int) (result []*models.FileToMigrate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileToMigrateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileToMigrateDo) Debug() IFileToMigrateDo {
	return f.withDO(f.DO.Debug())
}

func (f fileToMigrateDo) WithContext(ctx context.Context) IFileToMigrateDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileToMigrateDo) ReadDB() IFileToMigrateDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileToMigrateDo) WriteDB() IFileToMigrateDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileToMigrateDo) Session(config *gorm.Session) IFileToMigrateDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileToMigrateDo) Clauses(conds ...clause.Expression) IFileToMigrateDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileToMigrateDo) Returning(value interface{}, columns ...string) IFileToMigrateDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileToMigrateDo) Not(conds ...gen.Condition) IFileToMigrateDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileToMigrateDo) Or(conds ...gen.Condition) IFileToMigrateDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileToMigrateDo) Select(conds ...field.Expr) IFileToMigrateDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileToMigrateDo) Where(conds ...gen.Condition) IFileToMigrateDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileToMigrateDo) Order(conds ...field.Expr) IFileToMigrateDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileToMigrateDo) Distinct(cols ...field.Expr) IFileToMigrateDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileToMigrateDo) Omit(cols ...field.Expr) IFileToMigrateDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileToMigrateDo) Join(table schema.Tabler, on ...field.Expr) IFileToMigrateDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileToMigrateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileToMigrateDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileToMigrateDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileToMigrateDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileToMigrateDo) Group(cols ...field.Expr) IFileToMigrateDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileToMigrateDo) Having(conds ...gen.Condition) IFileToMigrateDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileToMigrateDo) Limit(limit int) IFileToMigrateDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileToMigrateDo) Offset(offset int) IFileToMigrateDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileToMigrateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileToMigrateDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileToMigrateDo) Unscoped() IFileToMigrateDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileToMigrateDo) Create(values ...*models.FileToMigrate) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileToMigrateDo) CreateInBatches(values []*models.FileToMigrate, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileToMigrateDo) Save(values ...*models.FileToMigrate) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileToMigrateDo) First() (*models.FileToMigrate, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.FileToMigrate), nil
	}
}

func (f fileToMigrateDo) Take() (*models.FileToMigrate, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.FileToMigrate), nil
	}
}

func (f fileToMigrateDo) Last() (*models.FileToMigrate, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.FileToMigrate), nil
	}
}

func (f fileToMigrateDo) Find() ([]*models.FileToMigrate, error) {
	result, err := f.DO.Find()
	return result.([]*models.FileToMigrate), err
}

func (f fileToMigrateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FileToMigrate, err error) {
	buf := make([]*models.FileToMigrate, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileToMigrateDo) FindInBatches(result *[]*models.FileToMigrate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileToMigrateDo) Attrs(attrs ...field.AssignExpr) IFileToMigrateDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileToMigrateDo) Assign(attrs ...field.AssignExpr) IFileToMigrateDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileToMigrateDo) Joins(fields ...field.RelationField) IFileToMigrateDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileToMigrateDo) Preload(fields ...field.RelationField) IFileToMigrateDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileToMigrateDo) FirstOrInit() (*models.FileToMigrate, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.FileToMigrate), nil
	}
}

func (f fileToMigrateDo) FirstOrCreate() (*models.FileToMigrate, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.FileToMigrate), nil
	}
}

func (f fileToMigrateDo) FindByPage(offset int, limit int) (result []*models.FileToMigrate, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileToMigrateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileToMigrateDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileToMigrateDo) Delete(models ...*models.FileToMigrate) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileToMigrateDo) withDO(do gen.Dao) *fileToMigrateDo {
	f.DO = *do.(*gen.DO)
	return f
}
