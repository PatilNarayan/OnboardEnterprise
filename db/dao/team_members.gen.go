// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"core/models"
)

func newTeamMember(db *gorm.DB, opts ...gen.DOOption) teamMember {
	_teamMember := teamMember{}

	_teamMember.teamMemberDo.UseDB(db, opts...)
	_teamMember.teamMemberDo.UseModel(&models.TeamMember{})

	tableName := _teamMember.teamMemberDo.TableName()
	_teamMember.ALL = field.NewAsterisk(tableName)
	_teamMember.ID = field.NewField(tableName, "id")
	_teamMember.TeamID = field.NewField(tableName, "team_id")
	_teamMember.UserID = field.NewField(tableName, "user_id")
	_teamMember.CreatedAt = field.NewTime(tableName, "created_at")

	_teamMember.fillFieldMap()

	return _teamMember
}

type teamMember struct {
	teamMemberDo

	ALL       field.Asterisk
	ID        field.Field
	TeamID    field.Field
	UserID    field.Field
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (t teamMember) Table(newTableName string) *teamMember {
	t.teamMemberDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teamMember) As(alias string) *teamMember {
	t.teamMemberDo.DO = *(t.teamMemberDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teamMember) updateTableName(table string) *teamMember {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewField(table, "id")
	t.TeamID = field.NewField(table, "team_id")
	t.UserID = field.NewField(table, "user_id")
	t.CreatedAt = field.NewTime(table, "created_at")

	t.fillFieldMap()

	return t
}

func (t *teamMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teamMember) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["id"] = t.ID
	t.fieldMap["team_id"] = t.TeamID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["created_at"] = t.CreatedAt
}

func (t teamMember) clone(db *gorm.DB) teamMember {
	t.teamMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teamMember) replaceDB(db *gorm.DB) teamMember {
	t.teamMemberDo.ReplaceDB(db)
	return t
}

type teamMemberDo struct{ gen.DO }

type ITeamMemberDo interface {
	gen.SubQuery
	Debug() ITeamMemberDo
	WithContext(ctx context.Context) ITeamMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeamMemberDo
	WriteDB() ITeamMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeamMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeamMemberDo
	Not(conds ...gen.Condition) ITeamMemberDo
	Or(conds ...gen.Condition) ITeamMemberDo
	Select(conds ...field.Expr) ITeamMemberDo
	Where(conds ...gen.Condition) ITeamMemberDo
	Order(conds ...field.Expr) ITeamMemberDo
	Distinct(cols ...field.Expr) ITeamMemberDo
	Omit(cols ...field.Expr) ITeamMemberDo
	Join(table schema.Tabler, on ...field.Expr) ITeamMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeamMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeamMemberDo
	Group(cols ...field.Expr) ITeamMemberDo
	Having(conds ...gen.Condition) ITeamMemberDo
	Limit(limit int) ITeamMemberDo
	Offset(offset int) ITeamMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamMemberDo
	Unscoped() ITeamMemberDo
	Create(values ...*models.TeamMember) error
	CreateInBatches(values []*models.TeamMember, batchSize int) error
	Save(values ...*models.TeamMember) error
	First() (*models.TeamMember, error)
	Take() (*models.TeamMember, error)
	Last() (*models.TeamMember, error)
	Find() ([]*models.TeamMember, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TeamMember, err error)
	FindInBatches(result *[]*models.TeamMember, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.TeamMember) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeamMemberDo
	Assign(attrs ...field.AssignExpr) ITeamMemberDo
	Joins(fields ...field.RelationField) ITeamMemberDo
	Preload(fields ...field.RelationField) ITeamMemberDo
	FirstOrInit() (*models.TeamMember, error)
	FirstOrCreate() (*models.TeamMember, error)
	FindByPage(offset int, limit int) (result []*models.TeamMember, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeamMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teamMemberDo) Debug() ITeamMemberDo {
	return t.withDO(t.DO.Debug())
}

func (t teamMemberDo) WithContext(ctx context.Context) ITeamMemberDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teamMemberDo) ReadDB() ITeamMemberDo {
	return t.Clauses(dbresolver.Read)
}

func (t teamMemberDo) WriteDB() ITeamMemberDo {
	return t.Clauses(dbresolver.Write)
}

func (t teamMemberDo) Session(config *gorm.Session) ITeamMemberDo {
	return t.withDO(t.DO.Session(config))
}

func (t teamMemberDo) Clauses(conds ...clause.Expression) ITeamMemberDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teamMemberDo) Returning(value interface{}, columns ...string) ITeamMemberDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teamMemberDo) Not(conds ...gen.Condition) ITeamMemberDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teamMemberDo) Or(conds ...gen.Condition) ITeamMemberDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teamMemberDo) Select(conds ...field.Expr) ITeamMemberDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teamMemberDo) Where(conds ...gen.Condition) ITeamMemberDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teamMemberDo) Order(conds ...field.Expr) ITeamMemberDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teamMemberDo) Distinct(cols ...field.Expr) ITeamMemberDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teamMemberDo) Omit(cols ...field.Expr) ITeamMemberDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teamMemberDo) Join(table schema.Tabler, on ...field.Expr) ITeamMemberDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teamMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeamMemberDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teamMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeamMemberDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teamMemberDo) Group(cols ...field.Expr) ITeamMemberDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teamMemberDo) Having(conds ...gen.Condition) ITeamMemberDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teamMemberDo) Limit(limit int) ITeamMemberDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teamMemberDo) Offset(offset int) ITeamMemberDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teamMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamMemberDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teamMemberDo) Unscoped() ITeamMemberDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teamMemberDo) Create(values ...*models.TeamMember) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teamMemberDo) CreateInBatches(values []*models.TeamMember, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teamMemberDo) Save(values ...*models.TeamMember) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teamMemberDo) First() (*models.TeamMember, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.TeamMember), nil
	}
}

func (t teamMemberDo) Take() (*models.TeamMember, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.TeamMember), nil
	}
}

func (t teamMemberDo) Last() (*models.TeamMember, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.TeamMember), nil
	}
}

func (t teamMemberDo) Find() ([]*models.TeamMember, error) {
	result, err := t.DO.Find()
	return result.([]*models.TeamMember), err
}

func (t teamMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TeamMember, err error) {
	buf := make([]*models.TeamMember, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teamMemberDo) FindInBatches(result *[]*models.TeamMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teamMemberDo) Attrs(attrs ...field.AssignExpr) ITeamMemberDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teamMemberDo) Assign(attrs ...field.AssignExpr) ITeamMemberDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teamMemberDo) Joins(fields ...field.RelationField) ITeamMemberDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teamMemberDo) Preload(fields ...field.RelationField) ITeamMemberDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teamMemberDo) FirstOrInit() (*models.TeamMember, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.TeamMember), nil
	}
}

func (t teamMemberDo) FirstOrCreate() (*models.TeamMember, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.TeamMember), nil
	}
}

func (t teamMemberDo) FindByPage(offset int, limit int) (result []*models.TeamMember, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teamMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teamMemberDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teamMemberDo) Delete(models ...*models.TeamMember) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teamMemberDo) withDO(do gen.Dao) *teamMemberDo {
	t.DO = *do.(*gen.DO)
	return t
}
