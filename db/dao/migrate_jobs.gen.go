// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"core/models"
)

func newMigrateJobs(db *gorm.DB, opts ...gen.DOOption) migrateJobs {
	_migrateJobs := migrateJobs{}

	_migrateJobs.migrateJobsDo.UseDB(db, opts...)
	_migrateJobs.migrateJobsDo.UseModel(&models.MigrateJobs{})

	tableName := _migrateJobs.migrateJobsDo.TableName()
	_migrateJobs.ALL = field.NewAsterisk(tableName)
	_migrateJobs.ID = field.NewField(tableName, "id")
	_migrateJobs.OrgID = field.NewField(tableName, "org_id")
	_migrateJobs.TeamID = field.NewField(tableName, "team_id")
	_migrateJobs.Status = field.NewString(tableName, "status")
	_migrateJobs.CreatedBy = field.NewField(tableName, "created_by")
	_migrateJobs.CreatedAt = field.NewTime(tableName, "created_at")
	_migrateJobs.UpdatedAt = field.NewTime(tableName, "updated_at")

	_migrateJobs.fillFieldMap()

	return _migrateJobs
}

type migrateJobs struct {
	migrateJobsDo

	ALL       field.Asterisk
	ID        field.Field
	OrgID     field.Field
	TeamID    field.Field
	Status    field.String
	CreatedBy field.Field
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (m migrateJobs) Table(newTableName string) *migrateJobs {
	m.migrateJobsDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m migrateJobs) As(alias string) *migrateJobs {
	m.migrateJobsDo.DO = *(m.migrateJobsDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *migrateJobs) updateTableName(table string) *migrateJobs {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewField(table, "id")
	m.OrgID = field.NewField(table, "org_id")
	m.TeamID = field.NewField(table, "team_id")
	m.Status = field.NewString(table, "status")
	m.CreatedBy = field.NewField(table, "created_by")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *migrateJobs) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *migrateJobs) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["org_id"] = m.OrgID
	m.fieldMap["team_id"] = m.TeamID
	m.fieldMap["status"] = m.Status
	m.fieldMap["created_by"] = m.CreatedBy
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m migrateJobs) clone(db *gorm.DB) migrateJobs {
	m.migrateJobsDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m migrateJobs) replaceDB(db *gorm.DB) migrateJobs {
	m.migrateJobsDo.ReplaceDB(db)
	return m
}

type migrateJobsDo struct{ gen.DO }

type IMigrateJobsDo interface {
	gen.SubQuery
	Debug() IMigrateJobsDo
	WithContext(ctx context.Context) IMigrateJobsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMigrateJobsDo
	WriteDB() IMigrateJobsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMigrateJobsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMigrateJobsDo
	Not(conds ...gen.Condition) IMigrateJobsDo
	Or(conds ...gen.Condition) IMigrateJobsDo
	Select(conds ...field.Expr) IMigrateJobsDo
	Where(conds ...gen.Condition) IMigrateJobsDo
	Order(conds ...field.Expr) IMigrateJobsDo
	Distinct(cols ...field.Expr) IMigrateJobsDo
	Omit(cols ...field.Expr) IMigrateJobsDo
	Join(table schema.Tabler, on ...field.Expr) IMigrateJobsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMigrateJobsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMigrateJobsDo
	Group(cols ...field.Expr) IMigrateJobsDo
	Having(conds ...gen.Condition) IMigrateJobsDo
	Limit(limit int) IMigrateJobsDo
	Offset(offset int) IMigrateJobsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMigrateJobsDo
	Unscoped() IMigrateJobsDo
	Create(values ...*models.MigrateJobs) error
	CreateInBatches(values []*models.MigrateJobs, batchSize int) error
	Save(values ...*models.MigrateJobs) error
	First() (*models.MigrateJobs, error)
	Take() (*models.MigrateJobs, error)
	Last() (*models.MigrateJobs, error)
	Find() ([]*models.MigrateJobs, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MigrateJobs, err error)
	FindInBatches(result *[]*models.MigrateJobs, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MigrateJobs) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMigrateJobsDo
	Assign(attrs ...field.AssignExpr) IMigrateJobsDo
	Joins(fields ...field.RelationField) IMigrateJobsDo
	Preload(fields ...field.RelationField) IMigrateJobsDo
	FirstOrInit() (*models.MigrateJobs, error)
	FirstOrCreate() (*models.MigrateJobs, error)
	FindByPage(offset int, limit int) (result []*models.MigrateJobs, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMigrateJobsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m migrateJobsDo) Debug() IMigrateJobsDo {
	return m.withDO(m.DO.Debug())
}

func (m migrateJobsDo) WithContext(ctx context.Context) IMigrateJobsDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m migrateJobsDo) ReadDB() IMigrateJobsDo {
	return m.Clauses(dbresolver.Read)
}

func (m migrateJobsDo) WriteDB() IMigrateJobsDo {
	return m.Clauses(dbresolver.Write)
}

func (m migrateJobsDo) Session(config *gorm.Session) IMigrateJobsDo {
	return m.withDO(m.DO.Session(config))
}

func (m migrateJobsDo) Clauses(conds ...clause.Expression) IMigrateJobsDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m migrateJobsDo) Returning(value interface{}, columns ...string) IMigrateJobsDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m migrateJobsDo) Not(conds ...gen.Condition) IMigrateJobsDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m migrateJobsDo) Or(conds ...gen.Condition) IMigrateJobsDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m migrateJobsDo) Select(conds ...field.Expr) IMigrateJobsDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m migrateJobsDo) Where(conds ...gen.Condition) IMigrateJobsDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m migrateJobsDo) Order(conds ...field.Expr) IMigrateJobsDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m migrateJobsDo) Distinct(cols ...field.Expr) IMigrateJobsDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m migrateJobsDo) Omit(cols ...field.Expr) IMigrateJobsDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m migrateJobsDo) Join(table schema.Tabler, on ...field.Expr) IMigrateJobsDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m migrateJobsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMigrateJobsDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m migrateJobsDo) RightJoin(table schema.Tabler, on ...field.Expr) IMigrateJobsDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m migrateJobsDo) Group(cols ...field.Expr) IMigrateJobsDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m migrateJobsDo) Having(conds ...gen.Condition) IMigrateJobsDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m migrateJobsDo) Limit(limit int) IMigrateJobsDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m migrateJobsDo) Offset(offset int) IMigrateJobsDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m migrateJobsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMigrateJobsDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m migrateJobsDo) Unscoped() IMigrateJobsDo {
	return m.withDO(m.DO.Unscoped())
}

func (m migrateJobsDo) Create(values ...*models.MigrateJobs) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m migrateJobsDo) CreateInBatches(values []*models.MigrateJobs, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m migrateJobsDo) Save(values ...*models.MigrateJobs) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m migrateJobsDo) First() (*models.MigrateJobs, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MigrateJobs), nil
	}
}

func (m migrateJobsDo) Take() (*models.MigrateJobs, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MigrateJobs), nil
	}
}

func (m migrateJobsDo) Last() (*models.MigrateJobs, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MigrateJobs), nil
	}
}

func (m migrateJobsDo) Find() ([]*models.MigrateJobs, error) {
	result, err := m.DO.Find()
	return result.([]*models.MigrateJobs), err
}

func (m migrateJobsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MigrateJobs, err error) {
	buf := make([]*models.MigrateJobs, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m migrateJobsDo) FindInBatches(result *[]*models.MigrateJobs, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m migrateJobsDo) Attrs(attrs ...field.AssignExpr) IMigrateJobsDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m migrateJobsDo) Assign(attrs ...field.AssignExpr) IMigrateJobsDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m migrateJobsDo) Joins(fields ...field.RelationField) IMigrateJobsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m migrateJobsDo) Preload(fields ...field.RelationField) IMigrateJobsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m migrateJobsDo) FirstOrInit() (*models.MigrateJobs, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MigrateJobs), nil
	}
}

func (m migrateJobsDo) FirstOrCreate() (*models.MigrateJobs, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MigrateJobs), nil
	}
}

func (m migrateJobsDo) FindByPage(offset int, limit int) (result []*models.MigrateJobs, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m migrateJobsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m migrateJobsDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m migrateJobsDo) Delete(models ...*models.MigrateJobs) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *migrateJobsDo) withDO(do gen.Dao) *migrateJobsDo {
	m.DO = *do.(*gen.DO)
	return m
}
